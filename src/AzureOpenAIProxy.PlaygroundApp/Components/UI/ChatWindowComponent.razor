@using AzureOpenAIProxy.PlaygroundApp.Clients
@inject IOpenAIApiClient Api
@inject IConfiguration config

<div class="container">
    <h3>Chat Window</h3>

    <div class="row">
        <div class="col-md-6">
            <textarea class="form-control" readonly>@userPrompt</textarea>
        </div>
        <div class="col-md-6">
            <textarea class="form-control" readonly>@assistantMessage</textarea>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            <textarea class="form-control" @bind="@userInput"></textarea>
        </div>
        <div class="col-md-6">
            <button class="btn btn-primary" @onclick="SendAsync">Send</button>
            <button class="btn btn-secondary" @onclick="ClearAsync">Clear</button>
        </div>
    </div>
</div>

@code {
    private string? endpoint = "https://localhost:7001/";
    private string? apiKey = "abcdef";
    private string? deploymentName = "model-gpt35turbo16k-0613";
    private int? maxTokens = 4096;
    private float? temperature = 0.7f;
    private string? systemPrompt = "You are an AI assistant that helps people find information.";
    private string? userPrompt;
    private string? assistantMessage;
    private string? userInput;
    
    private async Task SendAsync()
    {
        userPrompt = userInput;

        // get endpoint, apiKey, deploymentName, maxTokens, temperature, systemPrompt, userInput from configuration
        // which is sent from AppHost with below code
        /* builder.AddProject<Projects.AzureOpenAIProxy_PlaygroundApp>("playgroundapp")
       .WithExternalHttpEndpoints()
       .WithEnvironment("OpenAI__Endpoint", config["OpenAI:Endpoint"])
       .WithEnvironment("OpenAI__ApiKey", config["OpenAI:ApiKey"])
       .WithEnvironment("OpenAI__DeploymentNames", config["OpenAI:DeploymentNames"])
       .WithReference(apiapp); */
        try
        {
            var options = new OpenAIApiClientOptions()
            {
                Endpoint = config["OpenAI:Endpoint"],
                ApiKey = config["OpenAI:ApiKey"],
                DeploymentName = config["OpenAI:DeploymentName"],
                MaxTokens = maxTokens,
                Temperature = temperature,
                SystemPrompt = systemPrompt,
                UserPrompt = userInput,
            };
            var result = await Api.CompleteChatAsync(options);
            assistantMessage = result;

        }
        catch (Exception ex)
        {
            assistantMessage = ex.Message;
        }
    }

    private async Task ClearAsync()
    {
        userPrompt = string.Empty;
        assistantMessage = string.Empty;
        userInput = string.Empty;

        await Task.CompletedTask;
    }
}
